import tkinter as tk
from tkinter import *
import sys
import datetime
import time
import csv
import tkFont

from dronekit import connect, VehicleMode, Command, LocationGlobal
from pymavlink import mavutil
import math

global payload_drop
payload_drop = ''
# Set up import to CSV
global csvtog
csvtog = False
global csvfile
timename = time.strftime('%y-%m-%d___%H_%M_%S')
csvfile = open('SAE_Data_' + timename + '.csv','wb')
thiswriter = csv.writer(csvfile, delimiter = ',', quoting=csv.QUOTE_MINIMAL)
thiswriter.writerow(['Time:', 'Altitude:', 'Raw Altitude:', 'Home Location:', 'Notes'])

# Connect to vehicle
connectionString = "com6"
print "Connecting on: ",connectionString
vehicle = connect(connectionString, wait_ready=["location.global_relative_frame"], baud=57600)

vehicle.home_location=vehicle.location.global_frame
cmds = vehicle.commands
cmds.download()
cmds.wait_ready()

home_alt = vehicle.home_location.alt
home_alt = home_alt*3.28084

window = tk.Tk()

window.title('LMU AirLions')
#You can set the geometry attribute to change the root windows size
window.geometry("1540x840") #You want the size of the app to be 500x500

back = tk.Frame(window,bg='black')
window.configure(background='black')

# create font sizes
helv120 = tkFont.Font(family='Verdana', size=120)
verd55 = tkFont.Font(family='Verdana', size= 55)
verd24 = tkFont.Font(family='Verdana', size=24)
verd16 = tkFont.Font(family='Verdana', size=16)

# create x and y coordinates
data_x = 1010
data_y = 165
label_x = 925
label_y = 100

# Create button coordinates
btn_x = 30
btn_y = 740

# Create Labels for: altitude and clock

# Altitude Label
alt_label = Label(text = "Altitude (ft)", font = verd24, bg = 'black', fg = 'white')
alt_label.place(x=label_x,y=label_y-10)
alt1 = ''
alt2 = Label(window, font = helv120, bg = 'black', fg = 'yellow')
alt2.pack(fill= BOTH, expand = 1)
alt2.place(x=data_x-60, y=label_y+40-10)

# Time Label
global timservo_pos
timservo_pos = ''
global clock
clock = Label(window, font=('Verdana', 25), bg='black', fg = 'white')
clock.pack(fill=BOTH, expand=1)
clock.place(x=1175,y=10)

# Main loop gets called every 200ms to update altitude and time
#
#

# Time information
def tick():
    global timservo_pos
    global clock
    # get the current local time from the PC
    timservo_ch = time.strftime('%y-%m-%d %H:%M:%S')
    # if time string has changed, update it
    if timservo_ch != timservo_pos:
        timservo_pos = timservo_ch
        clock.config(text=timservo_ch)
    # calls itself every 200 milliseconds
    # to update the time display as needed
    getFlightData()
    clock.after(200,tick)
    
# Flight information
def getFlightData():
    altitude = vehicle.location.global_relative_frame.alt
    altitude = int(altitude*3.28084)

    if altitude < 0:
        altitude = 0

    global csvtog
    if csvtog:
        timeNow = time.strftime('%y-%m-%d %H:%M:%S')
        global csvfile
        thiswriter = csv.writer(csvfile, delimiter = ',', quoting=csv.QUOTE_MINIMAL)
        thiswriter.writerow([timeNow , altitude, vehicle.location.global_relative_frame.alt*3.28084, vehicle.home_location.alt*3.28084, payload_drop])
        
    updateHUD(altitude)
    return (altitude)

def updateHUD(altitude):
    alt2.config(text = altitude)
    return
    
# create the functions that display which payload was dropped
def CDA():
    CDA_label = Label(text = "CDA       ", font = ('Verdana', 100), fg = 'white', bg = 'black')
    CDA_label.place(x=100,y=150)    
    global csvfile
    timeNow = time.strftime('%y-%m-%d %H:%M:%S')
    payload_drop = "CDAs were dropped"
    thiswriter = csv.writer(csvfile, delimiter = ',', quoting=csv.QUOTE_MINIMAL)
    thiswriter.writerow([timeNow , int(vehicle.location.global_relative_frame.alt*3.28084), int(vehicle.groundspeed*3.2804), vehicle.location.global_relative_frame.alt*3.28084, vehicle.groundspeed*3.28084, vehicle.home_location.alt*3.28084, vehicle.location.global_frame.lat, vehicle.location.global_frame.lon, payload_drop])

    # channel 4 is for the channel that will drop the CDAs
    vehicle.channels.overrides['5'] = 905 # input a number
    
    # set a delay to drop the CDA in the back
    #time.sleep(0.2)

    # channel 3 is for the channel that will drop the last CDA
    vehicle.channels.overrides['3'] = 1904 # input a number
    return
    
def supply():
    supply_label = Label(text = "Supplies", font = ('Verdana', 100), fg = 'white', bg = 'black')
    supply_label.place(x = 100,y=150)
   
    payload_drop = "Supplies were dropped"
    thiswriter = csv.writer(csvfile, delimiter = ',', quoting=csv.QUOTE_MINIMAL)
    thiswriter.writerow([timeNow , int(vehicle.location.global_relative_frame.alt*3.28084), int(vehicle.groundspeed*3.2804), vehicle.location.global_relative_frame.alt*3.28084, vehicle.groundspeed*3.28084, vehicle.home_location.alt*3.28084, vehicle.location.global_frame.lat, vehicle.location.global_frame.lon, payload_drop])

    # side door servos
    vehicle.channels.overrides['7'] = 2000 # right door pin
    vehicle.channels.overrides['6'] = 1000 # left door pin
    # front wall servos

    #vehicle.channels.overrides['7'] = 1000 # right side of the plane
    #vehicle.channels.overrides['8'] = 2000 # left side of the plane
    return
 
def habitat():
    habitat_label = Label(text = "Habitat", font = ('Verdana', 100), fg = 'white', bg = 'black')
    habitat_label.place(x=100,y=150)

    # side door servos
    vehicle.channels.overrides['7'] = 2000 # right door pin
    vehicle.channels.overrides['6'] = 1000 # left door pin
    # front wall servos

    # side door servos
    #vehicle.channels.overrides['5'] = 2000 # right door pin
    #vehicle.channels.overrides['6'] = 1000 # left door pin
    # front wall servos
    #vehicle.channels.overrides['7'] = 1000 # right side of the plane
    #vehicle.channels.overrides['8'] = 2000 # left side of the plane
    return

# creates a function to reset the servo to its closed position
def reset_servo():
    rst_label = Label(text = "             ", font = ('Verdana', 100), fg = 'white', bg = 'black')
    rst_label.place(x=100,y=150)

    vehicle.channels.overrides['3'] = 1219
    vehicle.channels.overrides['5'] = 1512

    vehicle.channels.overrides['7'] = 1000
    vehicle.channels.overrides['6'] = 2000
    
    """
    # side door servos
    vehicle.channels.overrides['5'] = 1000 # left door pin
    vehicle.channels.overrides['6'] = 2000 # right door pin
    # front wall servos
    vehicle.channels.overrides['7'] = 2000 # right side of the plane
    vehicle.channels.overrides['8'] = 1000 # left side of the plane
    """
    return

# Create button configuration
window.option_add("*Button.Background", "white")
window.option_add("*Button.Foreground", "red")

def toggleCSV():
    global csvtog
    csvtog = not csvtog
    if csvtog:
        #global CSV_button
        CSV_button.config(text = 'Stop Logging')
    else:
        CSV_button.config(text = 'Log Data')
    return

def quitcommand():
    global csvfile
    csvfile.close()
    window.destroy()
    vehicle.close()
    return

# Create buttons to display visuals for payload drops
#
#

# Button for CDA
CDA_button = tk.Button(window, text = "CDA", command = CDA, font = verd16, height = 2, width = 12, fg = "white", borderwidth = 0, bg = 'grey30')
CDA_button.place(x = btn_x, y = btn_y-10)

# Button for Supplies
supply_button = Button(window, text = "Supplies", command = supply, font = verd16, height = 2, width = 12, fg = "white", borderwidth = 0, bg = 'grey30')
supply_button.place(x = btn_x + 185, y = btn_y-10)

# Button for Habitat
habitat_button = Button(window, text = "Habitat", command = habitat, font = verd16, height = 2, width = 12, fg = "white", borderwidth = 0, bg = 'grey30')
habitat_button.place(x = btn_x + 2*185, y = btn_y-10)

# Button to Reset Servos
rst_servo_button = Button(window, text = "Reset Servos", command = reset_servo, font = verd16, height = 2, width = 12, fg = "white", borderwidth = 0, bg = 'grey30')
rst_servo_button.place(x = btn_x+185+90-60-30, y = btn_y-110)

# Button for CSV
CSV_button = tk.Button(window, text = "Log Data", command = toggleCSV, font = verd16, height = 2, width = 12, fg = "white", borderwidth = 0, bg = 'grey30')
CSV_button.place(x = btn_x, y = btn_y-110)

# Button to Exit
stop = Button(window, text = "Quit", command = quitcommand, font = verd16, height = 2, width = 12, fg = "red", borderwidth = 0, bg = 'grey30')
stop.place(x = btn_x+3*185, y = btn_y-10)


def show_entry_fields():
    if (int(servo_ch.get()) == int(3)):
        vehicle.channels.overrides['3'] = int(servo_pos.get())
        print vehicle.channels['3']
    elif (int(servo_ch.get()) == int(5)):
        vehicle.channels.overrides['5'] = int(servo_pos.get())
        print vehicle.channels['5']
    elif (int(servo_ch.get()) == int(6)):
        vehicle.channels.overrides['6'] = int(servo_pos.get())
        print vehicle.channels['6']
    elif (int(servo_ch.get()) == int(7)):
        vehicle.channels.overrides['7'] = int(servo_pos.get())
        print vehicle.channels['7']
    elif (int(servo_ch.get()) == int(8)):
        vehicle.channels.overrides['8'] = int(servo_pos.get())
        print vehicle.channels['8']

servo_ch_label = Label(window, text="Channel", font = ('Verdana', 15), fg = 'white', bg = 'black')
servo_ch_label.place(x=600-170, y = 620-30)

pos_servo_label = Label(text = "Position", font = ('Verdana', 15), fg = 'white', bg = 'black')
pos_servo_label.place(x=600-30, y=620-30)

# enter the channel corresponding to the servo you want to move
servo_ch = Entry(window, justify = CENTER)
servo_ch.place(x=510-100, y=660-30)

#enter the servo position (1000 to 2000ms)
servo_pos = Entry(window, justify = CENTER)
servo_pos.place(x=510+40, y = 660-30)

enter_btn = Button(window, text = "Set Servo", height = 2, width = 15, font = 10, command=show_entry_fields, fg = 'white', bg = 'grey30',borderwidth = 0)
enter_btn.place(x = 470, y = 660)   

tick()
window.mainloop()
